// FUNCTIONS/LAMBDAS

// anonymous functions (lambdas) are declared using '\'
// (if you squint hard enough, '\' looks kinda like lambda 'Î»')
// named functions are not supported

max := \x y {
    yif x > y {
        yeet x // yeets the value and returns from the function
    } 
    yeet y
}

a := 3
b := 18
yassert(max(a, b) == b)

// 'yeet' keyword can be omitted, last statement in a block is yeeted implicitly
max2 := \x y {
    yif x > y {
        x 
    } yels {
        y
    }
}

yassert(max(a, b) == max2(a, b))

// and again, as a one liner
max3 := \x y { yif x > y { x } yels { y } }

yassert(max2(a, b) == max3(a, b))


// RECURSION

fib := \n {
    yif n < 2 {
        n 
    } yels {
        fib(n-1) + fib(n-2)
    }
}

yassert(fib(18) == 2584)
// yassert() accepts optional error message for more context
yassert(fib(20) == 6765, "fibonacci didn't quite work")

factorial := \n { 
    yif n == 0 { 1 } yels { n * factorial(n-1) }
}

yassert(factorial(0) == 1)
yassert(factorial(1) == 1)
yassert(factorial(5) == 120)


// HIGHER-ORDER FUNCTIONS

add_three      := \x { x + 3 }
call_two_times := \x fn { fn(fn(x)) }
yassert(call_two_times(3, add_three) == 9)

add      := \a b { a + b }
sub      := \a b { a - b }
apply_fn := \fn a b { fn(a, b) }

yassert(apply_fn(add, 2, 2) == 4) 
yassert(apply_fn(sub, 10, 2) == 8)


// CLOSURES

newAdder := \x { 
    \n { x + n } 
}

addTwo := newAdder(2)
yassert(addTwo(5) == 7)

newGenerator := \ {
    n := 0
    \ { n = n + 2 }
}

gen := newGenerator()
yelp("generating:", gen(), gen(), gen()) // prints 'generating: 2 4 6'
yassert(gen() == 8)


// BUILT-IN FUNCTIONS

// len(), rest(), and push() are built in and can be used to contruct functions like map(), reduce(), or filter()

map := \arr f {
    iter := \arr acc {
        yif (len(arr) == 0) {
            acc
        } yels {
            iter(rest(arr), push(acc, f(arr[0])))
        }
    }

    iter(arr, [])
}

a      := [1, 2, 3, 4]
double := \x { x * 2 }
yassert(map(a, double) == [2, 4, 6, 8])
yassert(map(a, \x { x * 3 }) == [3, 6, 9, 12])

// as an aside, if you aren't that into functional languages, you could use a yall loop instead of 
// the shenanigans above to build map() function
map2 := \arr fn {
    acc := []
    yall arr {
        acc = push(acc, fn(yt))
    }
}

yassert(map(a, double) == map2(a, double))


reduce := \arr initial f {
    iter := \arr result {
        yif (len(arr) == 0) {
            result
        } yels {
            iter(rest(arr), f(result, arr[0]))
        }
    }

    iter(arr, initial)
}

sum := \arr {
    reduce(arr, 0, \initial el { initial + el })
}

yassert(sum([1, 2, 3, 4, 5]) == 15)


filter := \arr f {
    iter := \arr acc {
        yif (len(arr) == 0) {
            acc
        } yels {
            yif f(arr[0]) {
                iter(rest(arr), push(acc, arr[0]))
            } yels {
                iter(rest(arr), acc)
            }
        }
    }

    iter(arr, [])
}

a    := [1, 2, 3, 4, 5, 6, 7]
avg  := sum(a) / len(a)
smol := \x { x < avg }
yassert(filter(a, smol) == [1, 2, 3])


// definition of yoink, via UrbanDictionary: 
// An exclamation that, when uttered in conjunction with taking an object, immediately transfers
// ownership from the original owner to the person using the word regardless of previous property
// rights.
// The opposite of yeet.

arr := [1, 2, 3, 4]
a   := yoink(arr, 2)

yassert(a == 3)
yassert(arr == [1, 2, 4])