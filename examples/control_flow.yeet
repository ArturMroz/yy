// CONTROL FLOW

// yif yels expressions are used for conditional execution
// the values false and null are falsy, and everything else is truthy (like in Ruby)
// parentheses aren't required, but brackets are
yif 2*2 < 1 {           
   "nope, that shouldn't happen" 
} yels yif 8 + 8 > 4 {
   "yup, all good" 
} yels {
    "math.exe stopped working"
}

// there are 2 looping constructs in YY: yall and yoyo

// yall (Y'all) yeeterates over a collection (array, string or range)
// and declares 'yt' (short for yeeterator) variable automatically in the loop's scope
yall 0..3 {
    yap(yt) // prints '0', '1', '2', '3'
}

sum := 0
yall 0..4 {
    sum += yt
}
yassert(sum == 10)

acc := [] 
arr := [1, 2, 3]
yall arr {
    acc << yt * 2
}
yassert(acc == [2, 4, 6])

// alternatively
acc := [] 
arr := [1, 2, 3]
yall 0..len(arr)-1 {
    acc << arr[yt] * 2
}
yassert(acc == [2, 4, 6])

acc := [] 
yall 8..4 {
    acc << yt
}
yassert(acc == [8, 7, 6, 5, 4])

// yeeterators can be named explicitly if needed 
acc := [] 
yall i: 1..2 {
    yall j: 3..4 {
        acc << [i, j]
    }
}
yassert(acc == [[1, 3], [1, 4], [2, 3], [2, 4]])

result := ""
yall "test" {
    result += yt + ","
}
yassert(result == "t,e,s,t,")

// yall can be used to build function such as map() or filter()

map := \arr fn {
    acc := []
    yall arr {
        acc << fn(yt)
    }
}

a      := [1, 2, 3]
triple := \x { x * 3}
yassert(map(a, triple) == [3, 6, 9])

filter := \arr, fn {
    acc := []
    yall arr {
        yif fn(yt) {
            acc << yt
        }
    }
    acc
}

b    := [1, 2, 3, 4]
smol := \x { x < 3}
yassert(filter(b, smol) == [1, 2])


// 2nd type of loop: 'yoyo', inspired by the motion of a yoyo, going up and down

i := 0
yoyo i < 5 {
    i += 1
}

yassert(i == 5)

// yoyo loop expression evaluates to the last result
j := 0
result := yoyo j < 4 {
    j += 1
}

yap("result: ", result, " j: ", j)
yassert(result == 4)

arr := []
i   := 1
yoyo len(arr) < 5 {
    arr << i
    i += 3
}

yassert(arr == [1, 4, 7, 10, 13])

yoyo len(arr) > 0 {
    arr = arr[1..-1]
    yap(arr)
}

yassert(arr == [])
